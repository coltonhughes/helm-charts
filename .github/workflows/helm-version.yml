name: Helm Chart Version Management

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - '**/values.yaml'
      - '**/Chart.yaml'
    labels:
      - 'renovate/helm'
  
  push:
    branches:
      - main
    paths:
      - '**/values.yaml'
      - '**/Chart.yaml'

jobs:
  update-chart-versions:
    runs-on: helm-chart-builder
    if: startsWith(github.head_ref, 'renovate/') || github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Update Chart versions
        id: update-versions
        run: |
          changed_files=""
          
          # Find all Chart.yaml files
          for chart_file in $(find . -name "Chart.yaml" -type f); do
            chart_dir=$(dirname "$chart_file")
            values_file="$chart_dir/values.yaml"
            
            if [ -f "$values_file" ]; then
              echo "Processing chart: $chart_file"
              
              # Extract image tag from values.yaml
              image_tag=$(yq eval '.image.tag // .app.image.tag // .*.image.tag' "$values_file" 2>/dev/null | head -1)
              
              if [ "$image_tag" != "null" ] && [ -n "$image_tag" ]; then
                echo "Found image tag: $image_tag"
                
                # Update appVersion in Chart.yaml if it differs from image tag
                current_app_version=$(yq eval '.appVersion' "$chart_file")
                if [ "$current_app_version" != "$image_tag" ]; then
                  echo "Updating appVersion from $current_app_version to $image_tag"
                  yq eval ".appVersion = \"$image_tag\"" -i "$chart_file"
                  changed_files="$changed_files $chart_file"
                fi
                
                # Increment chart version (patch bump)
                current_chart_version=$(yq eval '.version' "$chart_file")
                if [[ $current_chart_version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
                  major=${BASH_REMATCH[1]}
                  minor=${BASH_REMATCH[2]}
                  patch=${BASH_REMATCH[3]}
                  new_patch=$((patch + 1))
                  new_version="$major.$minor.$new_patch"
                  
                  echo "Bumping chart version from $current_chart_version to $new_version"
                  yq eval ".version = \"$new_version\"" -i "$chart_file"
                  changed_files="$changed_files $chart_file"
                fi
              fi
            fi
          done
          
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT

      - name: Validate Charts
        run: |
          for chart_file in $(find . -name "Chart.yaml" -type f); do
            chart_dir=$(dirname "$chart_file")
            echo "Validating chart: $chart_dir"
            helm lint "$chart_dir" || echo "Warning: Chart validation failed for $chart_dir"
          done

      - name: Commit changes
        if: steps.update-versions.outputs.changed_files != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add ${{ steps.update-versions.outputs.changed_files }}
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(helm): auto-update chart and app versions
            
            - Updated appVersion to match image tags
            - Bumped chart version (patch)
            
            Co-authored-by: renovate[bot] <29139614+renovate[bot]@users.noreply.github.com>"
            
            # Push changes if this is a Renovate PR
            if [ "${{ github.event_name }}" = "pull_request" ] && [[ "${{ github.head_ref }}" == renovate/* ]]; then
              git push origin HEAD:${{ github.head_ref }}
            elif [ "${{ github.event_name }}" = "push" ]; then
              git push
            fi
          fi